#!/usr/bin/env python3

import cbor
import sys
import json
import signal
from {{module}} import {{NomClasse}}
from http.server import BaseHTTPRequestHandler
import socketserver


def ajoute_html(réponse):
    """
    Ajoute une version html à la réponse obtenue depuis `évalue`, dans
    son attribut "feedbacks_html".
    """
    feedback_html = "<div>\n"
    if réponse["_valide"]:
        feedback_html += "<p>Exercice réussi!</p>\n"
    else:
        feedback_html += "<p>Il y a une erreur</p>\n"
    if "_messages" in réponse and réponse["_messages"]:
        feedback_html += "<ul>\n"
        for ligne in réponse["_messages"]:
            feedback_html += "<li>" + ligne + "</li>\n"
        feedback_html += "</ul>\n"
    feedback_html += "</div>\n"
    réponse['feedbacks_html'] = feedback_html


class Handler(BaseHTTPRequestHandler):

    def __init__(self, *args):
            self.ex = {{NomClasse}}()
            super().__init__(*args)

    def do_POST(self):
        mesg=b""
        while True:
            line = self.rfile.readline().strip()
            chunk_length = int(line, 16)
            if chunk_length != 0:
                    chunk = self.rfile.read(chunk_length)
                    mesg+=chunk
                    self.rfile.readline()
            else:
                break


        self.send_response(200)
        self.end_headers()
        code_etu = cbor.loads(mesg)
        print("reçu: ", code_etu)
        réponse = self.ex.évalue(code_etu)
        ajoute_html(réponse)
        self.wfile.write(json.dumps(réponse).encode() + b'\n')
        self.wfile.flush()

def sigterm_handler(_signo, _stack_frame):
    exit(0)

if __name__ == "__main__":
    signal.signal(signal.SIGTERM, sigterm_handler)
    with socketserver.TCPServer(("", 8080), Handler ) as httpd:
        httpd.serve_forever()

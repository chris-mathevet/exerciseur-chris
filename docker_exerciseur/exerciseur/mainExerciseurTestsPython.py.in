#!/usr/bin/env python3

import cbor
import sys
import json
from http.server import BaseHTTPRequestHandler
import socketserver
import signal
from types import ModuleType
import importlib
from outils_exercices.voile import VoilePudique, ErreurVoilée
import outils_exercices.jacadi as jacadi
import traceback

class ServeurTentatives(BaseHTTPRequestHandler):

    def évalue(self, mod_etu, code_etu):
        sys.modules['code_etu'] = mod_etu
        import ast
        AST = ast.parse(code_etu)
        if not self.module_ens:
            self.module_ens = importlib.import_module('{{module}}')

        importlib.reload(self.module_ens)

        valide = True
        messages = []
        for (nom, test) in self.module_ens.__dict__.items():
            if nom.startswith("test_"):
                try:
                    with VoilePudique(ErreurVoilée):
                        retour_test = test()
                        if retour_test :
                            messages.append(retour_test)
                except ErreurVoilée as e_voilée:
                    valide = False
                    messages.append(e_voilée.messages())
                except Exception as e:
                    return {
                        "_valide": False,
                        "_messages": ["Bug dans l'exerciseur"] + traceback.format_exc().splitlines()
                    }
        if valide :
            messages.append("Tous les tests ont réussi, champion·ne!")
        return {
            "_valide": valide,
            "_messages": messages,
            "AST": ast.dump(AST)
        }

    def __init__(self, *args):
        self.module_ens = None
        super().__init__(*args)

    def résultat_erreur_load(self, e, code_etu):
        return {
            "_valide": False,
            "_messages": ["Exception au chargement de votre code", str(type(e)), str(e), str(code_etu)],
        }


    def résultat_fonction_manquante(self, nom_fonction):
        return {
            "_valide": False,
            "_messages": ["Vous ne fournissez pas la fonction {} demandée".format(nom_fonction)]
        }

    def résultat_erreur_exec(self, e):
        return {
            "_valide": False,
            "_messages": ["Exception à l'exécution de votre code", repr(e)],
        }

    def charge_code_etu(self, code_etu):
        mod_etu = ModuleType('code_etu')
        sys.modules['code_etu'] = mod_etu
        exec(code_etu, mod_etu.__dict__)
        return mod_etu

    def traite(self, code_etu):
        try:
            print("chargement code étu")
            mod_etu = self.charge_code_etu(code_etu)
        except Exception as e:
            return self.résultat_erreur_load(e, code_etu)

        try:
            return self.évalue(mod_etu, code_etu)
        except jacadi.FonctionÉtuManquante as fm:
            return self.résultat_fonction_manquante(fm.nom_f)
        except Exception as e:
            return self.résultat_erreur_exec(e)

        print("code étudiant étudié")

        print("résultat:", résultat)


    def ajoute_html(self, réponse):
        """
        Ajoute une version html à la réponse obtenue depuis `évalue`, dans
        son attribut "feedbacks_html".
        """
        if(not isinstance(réponse, dict)):
            réponse = {"_erreur_ajoute_html": "réponse is not a dict :" + str(réponse)}
            return
        feedback_html = "<div>\n"
        if réponse.get("_valide", False):
            feedback_html += "<p>Exercice réussi!</p>\n"
        else:
            feedback_html += "<p>Il y a une erreur</p>\n"
        if "_messages" in réponse and réponse["_messages"]:
            feedback_html += "<ul>\n"
            for message in réponse["_messages"]:
                feedback_html += "<li>" + str(message) + "</li>\n"
            feedback_html += "</ul>\n"
        feedback_html += "</div>\n"
        réponse['feedbacks_html'] = feedback_html

    def do_POST(self):
        mesg=b""
        while True:
            line = self.rfile.readline().strip()
            chunk_length = int(line, 16)
            if chunk_length != 0:
                    chunk = self.rfile.read(chunk_length)
                    mesg+=chunk
                    self.rfile.readline()
            else:
                break


        self.send_response(200)
        self.end_headers()
        dict_code_etu = cbor.loads(mesg)
        code_etu = dict_code_etu["code_etu"]
        résultat = self.traite(code_etu)
        self.ajoute_html(résultat)

        self.wfile.write(json.dumps(résultat).encode() + b'\n')
        self.wfile.flush()



def sigterm_handler(_signo, _stack_frame):
    exit(0)

if __name__ == "__main__":
    signal.signal(signal.SIGTERM, sigterm_handler)
    with socketserver.TCPServer(("", 8082), ServeurTentatives ) as httpd:
        httpd.serve_forever()
